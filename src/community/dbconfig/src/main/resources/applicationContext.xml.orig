<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!--
     spring/hibernate config
     -->

   <bean id="hibConfigDataSource" class="org.geoserver.data.GeoServerDataSource">
        <property name="dataDirectory" ref="dataDirectory"/>
        <property name="file" value="geoserver.db.properties"/>
        <property name="defaultParameters">
          <props>
            <prop key="driver">org.h2.Driver</prop>
            <prop key="url">jdbc:h2:file:${GEOSERVER_DATA_DIR}/geoserver</prop>
            <prop key="username"></prop>
            <prop key="password"></prop>
          </props>
        </property>
    </bean>

   <bean id="hibEntityManagerFactoryConfigurer" class="org.geoserver.config.GeoServerPropertyConfigurer">
      <constructor-arg ref="dataDirectory"/>
      <property name="location" value="file:hibernate.properties"/>
      <property name="properties">
        <props>
          <prop key="database">H2</prop>
          <prop key="databasePlatform">org.geoserver.hibernate.H2Dialect</prop>
          <prop key="showSql">false</prop>
          <prop key="generateDdl">true</prop>

          <prop key="hibernate.hbm2ddl.auto">update</prop>
          <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
          <prop key="hibernate.cache.provider_configuration_file_resource_path">/ehcache.xml</prop>
          <prop key="hibernate.cache.use_query_cache">true</prop>
          <prop key="hibernate.cache.use_second_level_cache">true</prop>
          <prop key="hibernate.generate_statistics">true</prop>
          <prop key="hibernate.session_factory_name">SessionFactory</prop>
          <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
          <prop key="hibernate.show_sql">false</prop>
          <prop key="hibernate.use_sql_comments">true</prop>
          <prop key="hibernate.format_sql">true</prop>
        </props>
      </property>
      <property name="comments">
         <value>Hibernate properties for the geoserver catalog and configuration. You probably 
don't  want to change these values unless instructed by a developer.</value>
      </property>
    </bean>
    
    <bean id="hibPostLoadEventListener" class="org.geoserver.catalog.hib.HibPostLoadEventListener"/>
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="hibConfigDataSource"/>
        <property name="persistenceProvider">
            <bean class="org.geoserver.hibernate.ConfigurableHibernatePersistence">
                <property name="interceptor">
                    <!-- can't inject catalog/config directly because it causes a cycle -->
                    <bean class="org.geoserver.hibernate.HibPropertyChangeInterceptor"/>
                </property>
                <property name="postLoadEventListeners">
                  <list>
                     <ref bean="hibPostLoadEventListener"/>
                  </list>
                </property>
            </bean>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${database}" />
                <property name="databasePlatform" value="${databasePlatform}" />
                <property name="showSql" value="${showSql}" />
                <property name="generateDdl" value="${generateDdl}" />
            </bean>
        </property>

        <property name="jpaPropertyMap">
            <map>
              <entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" />
              <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}" />
               
              <!-- 
              <entry key="hibernate.cache.provider_class" value="${hibernate.cache.provider_class}"/>
              <entry key="hibernate.cache.provider_configuration_file_resource_path" value="${hibernate.cache.provider_configuration_file_resource_path}"/>
              <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}"/>
              <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}"/-->
                
              <entry key="hibernate.session_factory_name" value="${hibernate.session_factory_name}" />
              <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}" />
              <entry key="hibernate.show_sql" value="${hibernate.show_sql}" />
              <entry key="hibernate.use_sql_comments" value="${hibernate.use_sql_comments}" />
              <entry key="hibernate.format_sql" value="${hibernate.format_sql}" />
            </map>
        </property>
    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <!-- Instruct Spring to perform declarative transaction management  -->
    <!-- automatically on annotated classes.                            -->
    <tx:annotation-driven/>

    <!-- PostProcessors to perform resource injection according to the JPA -->
    <!-- specification (@PersistenceContext, @PersistenceUnit).            -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!-- PostProcessors to perform exception translation on @Repository     -->
    <!-- classes (from native exceptions such as JPAPersistenceExceptions   -->
    <!--to Spring's DataAccessException hierarchy).                         -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <context:annotation-config/>
    
    <!--
     geoserver config
     -->
    <bean id="hibCatalogDAO" class="org.geoserver.catalog.hib.HibCatalogDAO">
    </bean>
    
    <bean id="hibGeoServerDAO" class="org.geoserver.config.hib.HibGeoServerDAO">
    </bean>
    
    <bean id="hibGeoServerLoader" class="org.geoserver.hibernate.HibGeoServerLoader">
       <constructor-arg ref="resourceLoader"/>
       <property name="catalogDAO" ref="hibCatalogDAO"/>
       <property name="geoServerDAO" ref="hibGeoServerDAO"/>
    </bean>
    

</beans>